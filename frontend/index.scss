// Colors 
$background: #1b1b1b;
$on-background: #ffffff;

$primary: #593191;
$primary-highlight: #6213d1;
$on-primary: #fafafa;

$secondary: #404040;
$on-secondary: #cccccc;

$aux-lighter: #757575;
$aux-darker: #262626;

// Sizes
$font-size-def: 20px;
$font-size-big: 1.5rem;
$font-size-large: 2rem;
$font-size-small: 0.75rem;

$padding-def: 0.05em 0.3em 0.05em 0.3em;

$border-small: 0.1em;
$border-def: 0.18em;
$border-rdef: 0.3em;

$margin-def: 0.3em;
$margin-big: 1em;

$gap-small: 0.3em;
$gap-def: 0.6em;
$gap-big: 2em;

$element-container-width: 195px;
$element-container-height: 185px;


// Mixins 
/// Flex container with enabled wrapping and gaps
@mixin flex-wrap($row-gap: $gap-def, $col-gap: $gap-def) {
  display: flex;
  flex-wrap: wrap;
  gap: $row-gap $col-gap;
}

/// Grid container with enabled gaps
@mixin grid-gap($row-gap: $gap-def, $col-gap: $gap-def) {
  display: grid;
  gap: $row-gap $col-gap;
}

/// Mixin used to layout single row of a grid.
/// Each passed selector takes 1 column
/// Syntax to pass row span may be tricky:
///     layout-row(#{start} / #{end}, ...)
@mixin layout-row($row, $start-col, $selectors...) {
  @for $i from 0 to length($selectors) {
    $idx: $i + 1;
    #{nth($selectors, $idx)} {
      grid-row: $row;
      grid-column: $i + $start-col;
    }
  }
} 

/// Mixin used to layout single column of a grid.
/// Each passed selector takes 1 row 
/// Syntax to pass column span may be tricky:
///     layout-col(#{start} / #{end}, ...)
@mixin layout-col($col, $start-row, $selectors...) {
  @for $i from 0 to length($selectors) {
    $idx: $i + 1;
    #{nth($selectors, $idx)} {
      grid-column: $col;
      grid-row: $i + $start-row;
    }
  }
} 


// Shared
%label-shared {
  color: $on-secondary;
  background-color: $secondary;
  padding: $padding-def;
  border-radius: $border-rdef;
}


// Basic blocks
.button {
  color: $on-primary;
  background-color: $primary;
  font-weight: bold;
  border: none;
  border-radius: $border-rdef;
  padding: $padding-def;
  text-decoration: none;
  cursor: pointer;

  &:hover, &.active {
    background-color: $primary-highlight;
  }
}

.outlined {
  color: inherit;
  background-color: inherit;
  padding: $padding-def;
  border-radius: 1em;
  border: $border-def solid $aux-lighter; 
}

.dotted {
  color: inherit;
  background-color: inherit;
  border: $border-small dotted $aux-lighter;
  padding: 0.1em;
}

.label {
  @extend %label-shared;
  text-align: center;
}

.text-block {
  @extend %label-shared;
  overflow-wrap: anywhere;
  display: block;
}

// Unique and global
body {
  background: $background;
  color: $on-background;
}

html, 
body {
  margin: 0;
  font-size: $font-size-def;
  @media (min-resolution: 192dpi) {
    font-size: $font-size-def * 2;
  }
}

input, 
button {
  cursor: pointer;
  font-family: unset;
  font-size: inherit;
}

// Exceptions
a.label {
  text-decoration: none;
}


// Components
.element-list {
  @include flex-wrap($margin-big);
  
  .element-container {
    background: $aux-darker;  

    width: $element-container-width;
    height: $element-container-height;
    
    border-radius: $border-rdef;
    display: flex;
    align-items: center;
    justify-content: center;

    &.animated {
      background: $aux-lighter;
    }
  }

  img {
    border-radius: $border-rdef;
    max-width: 175px;
    max-height: 175px;
  }
}

.input-autocomplete {
  @include grid-gap;
  grid-template-columns: auto min-content;
  
  input,
  button {
    @extend .outlined;
  }

  button {
    // Force button text to be in one line
    width: max-content;
  }
  
  .completions {
    @extend .dotted;
    background-color: $background;
    position: absolute;
    margin-top: 2em;
    z-index: 100;
  }
  
  .tag-completion {
    cursor: pointer;
    @include grid-gap(0, $gap-big);
    @include layout-row(
      1, 
      1,
      ".name",
      ".count",
    );

    padding: 0 0.1em 0 0.1em;

    .name {
      text-align: left;
    }

    .count {
      text-align: right;
    }
  }
  
  .tag-completion:hover {
    background-color: $aux-darker;
  }
  
  @media (min-resolution: 192dpi) {
    font-size: $font-size-small;
  }
}

.paginator {
  @include flex-wrap($gap-small, $gap-small);
  justify-content: center;
  font-size: $font-size-big;
}

%info-section {  
  @include grid-gap($gap-small, $gap-small);
  grid-template-columns: min-content auto;
  font-weight: bold;

  .section-data {
    grid-column: 1/3;
  }
  
  .section-label {
    @extend .label;
    grid-column: 1/3;
  }

  .section-part {
    @extend .text-block;
    grid-column: 1/3;
  }

  .param-name {
    @extend %label-shared;
    grid-column: 1;
  }
  
  .param-value {
    @extend .text-block;
    grid-column: 2;
  }
}

.element-metadata, .tag-infos {
  @extend %info-section;
} 

.tag-list {
  @extend %info-section;
  align-items: start;

  .tag-page-link {
    @extend .param-name;
    text-decoration: none;
  }
  
  .tag-info {
    @extend .param-value;
    @include grid-gap;
    @include layout-row(1, 1, ".tag-name", ".tag-count"); 
    justify-self: start;
    text-decoration: none;
  }
  
  .tag-count {
    text-align: right
  }
}

// Pages
main {
  @include grid-gap($gap-big); 
  @include layout-col(1, 1, ".search-box", ".page-content");
  // Little gap at top and bigger at bottom
  padding: 1em 0.5em 5em 0.5em; 

  .search-box {
    @include grid-gap;
    @include layout-row(1, 1, ".button", ".input-autocomplete");
    grid-template-columns: auto minmax(200px, 1000px) auto;
    
    .input-autocomplete {
      width: 100%;
      justify-self: center;
    }

    .button {
      width: max-content;
      justify-self: start;
    }
  }
}

.index-page {
  @include grid-gap($gap-big);
  width: 100%;
  grid-template-columns: 300px auto;

  > .elements {
    grid-row: 1;
    grid-column: 2;

    @include grid-gap($gap-big);
    @include layout-col(
      1, 
      1,
      ".paginator-top",
      ".element-list",
      ".paginator-bottom",
    );
    align-content: start;
  }

  > .metadata {
    @include grid-gap;
    @include layout-col(1, 1, ".element-count", ".tag-list");
    align-content: start;
  
    .element-count {
      @extend .label;
      font-weight: bold;
    }
  }
}

.element-page {
  // Constrain associated to 4 items in row
  $associated-width:
    calc($element-container-width * 4 + $font-size-def * ($gap-def / 1em) * 3);
  
  @include grid-gap($gap-big);
  width: 100%;
  grid-template-columns: 300px auto minmax(0, $associated-width);

  @include layout-row(
    1, 
    1, 
    "> .metadata", 
    "> #element-container", 
    "> .associated"
  );
  
  > .metadata {
    @include grid-gap;
    @include layout-col(1, 1, ".tag-list");
    align-content: start;
  
    .element-count {
      @extend .label;
      font-weight: bold;
    }
  }

  > #element-container {
  
  }

  // Constrain element size by default
  // TODO: Constrain width
  .element-constrained {
    width: inherit;
    height: inherit;
    max-height: 90vh;
  }

  > .associated {
    justify-self: end;
    
    @include grid-gap;
    grid-template-columns: 1fr;    
    align-content: start;
    justify-items: start;

    .group-label {
      @extend %label-shared
    }
  }
}

.tag-page {
  @include grid-gap($gap-big);
  width: 100%;
  grid-template-columns: 300px minmax(200px, 1000px);
  
  @include layout-row(
    1, 
    1, 
    "> .tag-info", 
    "> #tag-edit", 
  );

  #tag-edit {
    @include grid-gap;
    grid-template-columns: max-content min-content max-content auto;
    align-content: start;

    @include layout-row(1, 1, "#tag-name-label", "#tag-name");
    @include layout-row(2, 1, "#tag-alt-name-label", "#tag-alt-name");

    // Override
    #tag-name, #tag-alt-name {
      grid-column: 2/5
    }

    #change-tag {
      grid-row: 4;
      grid-column: 1/5;
    }

    #tag-alias {
      grid-row: 5;
      grid-column: 1/5;  
    }
    
    @include layout-row(
      3, 
      1, 
      "#tag-hidden-label", 
      "#tag-hidden",
      "#tag-type-label",
      "#tag-type",
    );

    // For labels inside #tag-edit
    .label {
      text-align: left;
    }

    input, 
    button {
      @extend .outlined;
    }

    select {
      @extend .outlined;
      font-size: inherit;

      option {
        background-color: $aux-darker;
      }
    }
  }
}
